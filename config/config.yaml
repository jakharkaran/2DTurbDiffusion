logging_params: # Logging for Weights and biases
  log_to_screen: !!bool False # not set-up - can be setup for logging to screen
  diagnostic_logs: !!bool False # not set-up
  log_to_wandb: !!bool False # True False
  wandb_table_logging_interval: 10 # not setup
  wandb_project: '2DTurb-diffusion-condition'
  wandb_group: 'static'
  wandb_name: 'base'

dataset_params:
  # im_path: 'dataset/data/train/images'
  # the data is contained in the 'data' folder in the root directory. there should be another 'mean_std.npz' file in the same folder with mean ans std values
  data_dir: '../data/Re500_fkx4fky4_r0.1_b20/NoSGS/NX64/dt0.0005_IC1/'
  # data_dir: 'Re500_fkx4fky4_r0.1_b20/2D_64_spectral_dt0.02_noise_2500/' # training on emulator data
  # data_dir: '2D_64_spectral_dt0.02_noise_2500/'

  file_range: [5000, 20000] # range of files to load
  # file_range: [55000, 104999] # range of files to load
  # file_range: [5000, 24999] # range of files to load
  # file_range: [30000, 54999] # range of files to load
  # file_range: [55000, 79999] # range of files to load
  # file_range: [80000, 104999] # range of files to load

  step_size: 1 # step size for data loading (every sample or every 10th sample)
  # num_samples: 2500 # total samples used for training = file_range[1] - file_range[0] // step_size
  condition_step_size: 3 # step size for conditioning data loading (every sample or every 10th sample)
  num_prev_conditioning_steps : 1 # 1 2 3 4 # Number of previous time steps to use for conditioning t-1, t-2, t-3, t-4
  downsample_factor: 1
  downsample_procedure: 'spectral' # spectral physical
  normalize: !!bool True

diffusion_params:
  conditional: !!bool True # True False
  num_timesteps : 1000
  beta_start : 0.0001
  beta_end : 0.02

model_params: # U-NET
  im_channels : 4 # 2 when conditional=False, 4, 6... when conditional=True
  pred_channels: 2 # =im_channels for conditional=False
  im_size : 64
  down_channels : [32, 64, 128, 256]
  mid_channels : [256, 256, 128]
  down_sample : [True, True, False]
  time_emb_dim : 128
  num_down_layers : 2
  num_mid_layers : 2
  num_up_layers : 2
  num_heads : 4

train_params:
  task_name: 'cond0'
  batch_size: 16
  num_epochs: 200
  lr: 0.0001
  loss: 'noise' # sample noise 
  condition_noise: !!bool False  # True False Noise is added to the conditioning ** Not implemented
  global_seed: 0

  divergence_loss: !!bool False # True False
  divergence_loss_type: 'denoise_sample' # denoise_sample (need loss = noise), direct_sample (loss == noise or sample)
  divergence_loss_weight: 1

  # Following only used for divergence_loss_type: denoise_sample
  denoise_sample_timestep: 1 # 1 - num_timesteps  
  denoise_sample_batch_ratio: 0.15 # % of batch used for divergence loss, rest of the samples used for mse loss

  model_collapse: !!bool False # True False # Not implemented for conditional
  model_collapse_type: 'all_gen' # all_gen last_gen # All generations vs last generation
  model_collapse_gen: 1 # 1 2 3 4 5 # Can't be gen 0 - model_collapse should be False for gen 0

  ckpt_name: 'ddpm_ckpt.pth'
  best_ckpt_name: 'best_ddpm_ckpt.pth'

# For Testing (Post training)
test_params:
  batch_size : 1 # Testing data batch size
  num_test_batch : 100 # number of samples = test_batch * num_test_batch
  test_file_start_idx : 5000  # For conditional:True, first real frame used to seed sampling
  save_image: !!bool True # Saves snapshots of emulated data
  save_data: !!bool True # Saved emulated data
